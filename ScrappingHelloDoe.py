{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ScrappingHelloDoe.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPPNeZUarDrGFHf/+EEoS8z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ThomasSaulou/Scrapper/blob/main/ScrappingHelloDoe.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t5b8Ox7IDsEY"
      },
      "source": [
        "#<------- clic sur le play a gauche pour lancer \n",
        "# HELLO DOE SCRAPPING \n",
        "## HELLO DOE SCRAPPING \n",
        "import requests\n",
        "from bs4 import BeautifulSoup \n",
        "\n",
        "### ENTRER L'URL INDEED A SCRAPPER :\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### let do\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "listTempsPlein=['temps complet','temps plein']\n",
        "listWordTypeEmploi=[\"cdi\",\"cdd\",\"auto-entrepreneur\",\"freelance / indépendant\"]\n",
        "listWordJours=[\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\",\"dimanche\"]  \n",
        "listFormatHoraires=[\"de XXhXX à XXhXX\",\"XXh/XXh\"]\n",
        "listFormatVolumeHoraire=[\"XX heures par semaine\",\"XX heures/semaine\",\"XXh/hebdo\",\"XXh de travail hebdomadaire\",\"XXh/semaine\",\"nombre d'heures : X par semaine\",\"nombre d'heures : XX par semaine\",\"XXh/jour\",\"Xh/jour\",\"Xh/mois\",\"XXh/mois\"]\n",
        "listFormatDureeContrat=['de X à X mois','de X mois'] \n",
        "listWordConnecteurs=[\"au\",\"du\"] \n",
        "salaryFormat =[['XX,XX € par heure','€/heure'],['XXXXXX € par an','€/an'],['XXXXX € par mois','€/mois'],['XX € par heure','€/heure']]\n",
        "\n",
        "class Mission:\n",
        "      def __init__(self,headerJob=0,description=0):\n",
        "          self.headerJob=headerJob\n",
        "          self.description=description\n",
        "          self.jobtitle=self.getJobtitle(headerJob)\n",
        "          self.companyname=self.getCompanyName(headerJob)\n",
        "          self.location=self.getLocation(headerJob)\n",
        "          self.salary=self.getSalary(headerJob)\n",
        "          self.typeContrat=self.getContratType(description)\n",
        "          self.horaires=self.gethoraires(description)\n",
        "          self.workDays=self.getworkingdays(description)\n",
        "          self.volumeHoraire=self.getvolumehoraires(description)\n",
        "          self.dureeContrat=self.getDureeContrat(description)\n",
        "\n",
        "          \n",
        "      def lookForFormat(self,texte,format):\n",
        "          formatlist=[]\n",
        "          listtotale=[]\n",
        "          for i in range(len(format)):\n",
        "              if(format[i]=='X'):\n",
        "                  formatlist.append(0)\n",
        "              else:\n",
        "                formatlist.append(1)\n",
        "          n=0\n",
        "          verif=1\n",
        "          indexdeb=0\n",
        "          while (formatlist[n]==0):\n",
        "              n=n+1\n",
        "              \n",
        "          for j in range(len(texte)):\n",
        "              verif=1\n",
        "              if (texte[j]==format[n]):\n",
        "                  for i in range(n,len(formatlist)):\n",
        "                    if (formatlist[i]==1 ):\n",
        "                    # print('lentext'+str(len(texte))+' indice texte= '+str(j+i-n)+' lenformat='+str(len(format))+' indice format='+str(i))\n",
        "                      if (verif==1 and j+i-n<len(texte) and texte[j+i-n]==format[i]):\n",
        "                        verif=1\n",
        "\n",
        "                      else:\n",
        "                        verif=0;\n",
        "\n",
        "                  if (verif==1):\n",
        "                    indexdeb=j\n",
        "                    list1=[]\n",
        "                    for a in range(len(formatlist)):\n",
        "                        if (formatlist[a]==0):\n",
        "                            list1.append(texte[j+a-n])\n",
        "                    listtotale.append(list1);\n",
        "          return listtotale;\n",
        "\n",
        "      def getconnecteur(self,words,listdaysfound):\n",
        "          finallist=[]\n",
        "          for day in range(0,len(listdaysfound)-1):\n",
        "              index=0\n",
        "              list1=[]\n",
        "              for i in range(0,len(words)-1):\n",
        "                  if (words[i]==listdaysfound[day]):\n",
        "                    index=i\n",
        "                    if (words[index+1]=='au'):\n",
        "                        on=0;\n",
        "                        list1=[]\n",
        "                        for j in range(len(listWordJours)):\n",
        "                            if (listdaysfound[day]==listWordJours[j]):\n",
        "                              on=1\n",
        "                            elif (listdaysfound[day+1]==listWordJours[j]):\n",
        "                              on=2\n",
        "                            if (on==1):\n",
        "                              list1.append(listWordJours[j])\n",
        "                            elif (on==2):\n",
        "                              list1.append(listWordJours[j])\n",
        "                              on=3;\n",
        "\n",
        "              finallist=list1;\n",
        "          return finallist\n",
        "\n",
        "      def getJobtitle(self,job):\n",
        "          a=job.find('a')\n",
        "          a=a.text\n",
        "          a=a.replace(\"\\n\", \"\")\n",
        "          return a  \n",
        "      def getCompanyName(self,job):\n",
        "        span=job.find('span', class_='company')\n",
        "        if (span!=None):\n",
        "          span=span.text\n",
        "          span=span.replace(\"\\n\",\"\")\n",
        "          print(span)\n",
        "          return span\n",
        "        else:\n",
        "          return 0 \n",
        "      def getLocation(self,job):\n",
        "        span=job.find('span', class_='location')\n",
        "        if (span!=None):\n",
        "          return span.text\n",
        "        else:\n",
        "            return 0  \n",
        "      def getSalary(self,job):\n",
        "          div=job.find('span', class_='salaryText')\n",
        "          #print(div)\n",
        "          salary=0;\n",
        "          if (div!=None):\n",
        "            for i in range(len(salaryFormat)):\n",
        "              Xsalary=self.lookForFormat(div.text,salaryFormat[i][0])\n",
        "              if(len(Xsalary)>0 and salary==0):\n",
        "                if (i==0):\n",
        "                  salary = str(Xsalary[0][0])+str(Xsalary[0][1])+','+str(Xsalary[0][2])+str(Xsalary[0][3])\n",
        "                elif (i==1): \n",
        "                  salary = str(Xsalary[0][0])+str(Xsalary[0][1])+str(Xsalary[0][3])+str(Xsalary[0][4])+str(Xsalary[0][5])\n",
        "                elif (i==2):\n",
        "                  salary =  str(Xsalary[0][0])+str(Xsalary[0][2])+str(Xsalary[0][3])+str(Xsalary[0][4])\n",
        "                elif (i==3):\n",
        "                  salary =  str(Xsalary[0][0])+str(Xsalary[0][1])\n",
        "                    \n",
        "                salary=salary+salaryFormat[i][1]\n",
        "          return salary\n",
        "\n",
        "  \n",
        "\n",
        "      def getworkingdays(self,text):\n",
        "          indexparagraph=0;\n",
        "          listdaysfound=[];\n",
        "          words = text.split(' ');\n",
        "          for day in range(len(listWordJours)):\n",
        "              n=text.find(listWordJours[day])\n",
        "              if(n!=-1):\n",
        "                  listdaysfound.append(listWordJours[day]);\n",
        "              \n",
        "              \n",
        "          listdaysfound=self.getconnecteur(words,listdaysfound);\n",
        "          if (len(listdaysfound)==0 and self.typeContrat !=0):\n",
        "            n=self.typeContrat.find('Temps plein')\n",
        "            if (n!=-1):\n",
        "              listdaysfound=['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi']\n",
        "          #print('day found = '+ str(listdaysfound))\n",
        "          if (len(listdaysfound)==0):\n",
        "            return 0\n",
        "          else :\n",
        "            return listdaysfound; \n",
        "      def getContratType(self,text):\n",
        "            typeContrat='';\n",
        "            volumeH=[]\n",
        "            for i in range(len(listWordTypeEmploi)):\n",
        "                    n = text.find(listWordTypeEmploi[i])\n",
        "                    if (n==-1):\n",
        "                      n=-1 \n",
        "                    else:\n",
        "                        typeContrat=listWordTypeEmploi[i]\n",
        "            n = text.find('temps partiel')\n",
        "            if (n==-1):\n",
        "                n=-1 \n",
        "            else:\n",
        "              typeContrat+=' - Temps partiel'\n",
        "            for i in listTempsPlein:\n",
        "              n2 = text.find(i)\n",
        "              if (n2==-1):\n",
        "                  n2=-1 \n",
        "              else:\n",
        "                if (n!=-1):\n",
        "                  typeContrat+=' ou Temps plein'\n",
        "                else :\n",
        "                    typeContrat+=' - Temps plein'\n",
        "            if (len(typeContrat)<=1):\n",
        "              return 0\n",
        "            else :\n",
        "                return typeContrat;\n",
        "      def getvolumehoraires(self,texte):\n",
        "          volumehoraire='';\n",
        "          for i in range(len(listFormatVolumeHoraire)):\n",
        "              list1=[];\n",
        "              list1=self.lookForFormat(texte,listFormatVolumeHoraire[i]);\n",
        "              if(len(list1)>0):\n",
        "                  list1=list1[0]\n",
        "                  for j in range(len(list1)):\n",
        "                    volumehoraire+= str(list1[j])\n",
        "                  if (i<=6):\n",
        "                    volumehoraire+= 'h/semaine'\n",
        "                  elif (6<i<=8) :\n",
        "                    volumehoraire +='h/jour' \n",
        "                  elif (8<i<=10)  :\n",
        "                    volumehoraire +='h/mois'\n",
        "\n",
        "          for i in listTempsPlein:\n",
        "            n = texte.find(i)\n",
        "            if(n!=-1):        \n",
        "              volumehoraire='35h/semaine'          \n",
        "          if (len(volumehoraire)<=1):\n",
        "            return 0\n",
        "          else :\n",
        "            return volumehoraire\n",
        "\n",
        "      def gethoraires(self,texte):\n",
        "            listhoraires=[]\n",
        "            horaire=[]\n",
        "            for i in range(len(listFormatHoraires)):\n",
        "                list1=[];\n",
        "                list1=self.lookForFormat(texte,listFormatHoraires[i])\n",
        "                if(len(list1)>0):\n",
        "                    for j in range(len(list1)):\n",
        "                      if (i==0):\n",
        "                        horaire.append(list1[j][0]+list1[j][1]+'h'+list1[j][2]+list1[j][3]+'-'+list1[j][4]+list1[j][5]+'h'+list1[j][6]+list1[j][7])\n",
        "                      elif (i==1):\n",
        "                        horaire.append(list1[j][0]+list1[j][1]+'h/'+list1[j][2]+list1[j][3]+'h')\n",
        "                      \n",
        "            #print('horaire='+ str(horaire))\n",
        "            if (len(horaire)==0):\n",
        "              return 0\n",
        "            else :\n",
        "              return horaire;\n",
        "\n",
        "      def getDureeContrat(self,text):\n",
        "            dureeContr=0;\n",
        "            for i in range(len(listFormatDureeContrat)):\n",
        "              list1=self.lookForFormat(text,listFormatDureeContrat[i]);\n",
        "              if(len(list1)>0):\n",
        "                list1=list1[0]\n",
        "                if (i==0):\n",
        "                  dureeContr='de '+str(list1[0])+' à '+str(list1[1])+' mois'\n",
        "                elif (i==1) :\n",
        "                  dureeContr=str(list1[0])+' mois'\n",
        "            return  dureeContr  \n",
        "\n",
        "      def display(self):\n",
        "        print('Titre: '+str(self.jobtitle))\n",
        "        print('Company: '+str(self.companyname))\n",
        "        print('Lieu: '+str(self.location))\n",
        "        print('Salaire: '+str(self.salary))\n",
        "        print('Contrat: '+str(self.typeContrat))\n",
        "        print('Jour de travail: '+str(self.workDays))\n",
        "        print('Volume Horaire: '+str(self.volumeHoraire))\n",
        "        print('Horaires: '+str(self.horaires))\n",
        "        print('Durée contrat: '+str(self.dureeContrat))\n",
        "\n",
        "      def displayDescription(self):\n",
        "        print('Description:'+str(self.description))\n",
        "      def displayHeaderJob(self): \n",
        "          print('Header:'+str(self.headerJob))\n",
        "\n",
        "\n",
        "def getAllDescription(url):\n",
        "    reponse=requests.get(url)\n",
        "    soup= BeautifulSoup(reponse.text,'lxml')\n",
        "    description=soup.find('div', class_='jobsearch-jobDescriptionText')\n",
        "    if (description!=None):\n",
        "      return description.text\n",
        "    else: \n",
        "      return 0 \n",
        "def lookForFormat(texte,format):\n",
        "    formatlist=[]\n",
        "    listtotale=[]\n",
        "    for i in range(len(format)):\n",
        "        if(format[i]=='X'):\n",
        "            formatlist.append(0)\n",
        "        \n",
        "        else:\n",
        "          formatlist.append(1)\n",
        "        \n",
        "    \n",
        "    n=0\n",
        "    verif=1\n",
        "    indexdeb=0\n",
        "    while (formatlist[n]==0):\n",
        "        n=n+1\n",
        "        \n",
        "    for j in range(len(texte)):\n",
        "        verif=1\n",
        "        if (texte[j]==format[n]):\n",
        "            for i in range(n,len(formatlist)):\n",
        "              if (formatlist[i]==1 ):\n",
        "               # print('lentext'+str(len(texte))+' indice texte= '+str(j+i-n)+' lenformat='+str(len(format))+' indice format='+str(i))\n",
        "                if (verif==1 and j+i-n<len(texte) and texte[j+i-n]==format[i]):\n",
        "                  verif=1\n",
        "\n",
        "                else:\n",
        "                  verif=0;\n",
        "\n",
        "            if (verif==1):\n",
        "              indexdeb=j\n",
        "              list1=[]\n",
        "              for a in range(len(formatlist)):\n",
        "                  if (formatlist[a]==0):\n",
        "                      list1.append(texte[j+a-n])\n",
        "              listtotale.append(list1);\n",
        "    return listtotale;\n",
        "\n",
        "\n",
        "def getUrl(url,job):\n",
        "    a=job.find('a')\n",
        "    link=a['href']\n",
        "    linkworking='https://fr.indeed.com/voir-emploi?'+link[7:]\n",
        "    return linkworking\n",
        "\n",
        "def getSalary(job):\n",
        "          div=job.find('span', class_='salaryText')\n",
        "          salary=0;\n",
        "          if (div!=None):\n",
        "            for i in range(len(salaryFormat)):\n",
        "              Xsalary=lookForFormat(div.text,salaryFormat[i][0])\n",
        "              if(len(Xsalary)>0 and salary==0):\n",
        "                if (i==0):\n",
        "                  salary = str(Xsalary[0][0])+str(Xsalary[0][1])+','+str(Xsalary[0][2])+str(Xsalary[0][3])\n",
        "                elif (i==1): \n",
        "                  salary = str(Xsalary[0][0])+str(Xsalary[0][1])+str(Xsalary[0][3])+str(Xsalary[0][4])+str(Xsalary[0][5])\n",
        "                elif (i==2):\n",
        "                  salary =  str(Xsalary[0][0])+str(Xsalary[0][2])+str(Xsalary[0][3])+str(Xsalary[0][4])\n",
        "                elif (i==3):\n",
        "                  salary =  str(Xsalary[0][0])+str(Xsalary[0][1])\n",
        "                    \n",
        "                salary=salary+salaryFormat[i][1]\n",
        "          return salary\n",
        "\n",
        "def getNewpage(soup):\n",
        "  ul=soup.find('ul', class_='pagination-list')\n",
        "  a=ul.findAll('a')\n",
        "  link='https://www.indeed.fr'+a[-1]['href']\n",
        "  \n",
        "  #print(link)\n",
        "  return link\n",
        "\n",
        "def getJobtitle(job):\n",
        "          a=job.find('a')\n",
        "          a=a.text\n",
        "          a=a.replace(\"\\n\", \"\")\n",
        "          return a \n",
        "\n",
        "def scrapper(url1):\n",
        "    print('in')\n",
        "    reponse=requests.get(url1)\n",
        "    ListMission=[]\n",
        "    listDescription=[]\n",
        "\n",
        "    listUrl=[]\n",
        "    listjobs=[]\n",
        "\n",
        "    if reponse.ok: \n",
        "      print('in')\n",
        "      \n",
        "      soup= BeautifulSoup(reponse.text,'lxml')\n",
        "      print(soup)\n",
        "      listj=soup.findAll('div', class_='result')\n",
        "      for i in range(len(listj)):\n",
        "          if (getSalary(listj[i])!=0):\n",
        "              #print('NEW= salary ='+ str(getSalary(listj[i])+' Titre='+str(getJobtitle(listj[i]))));\n",
        "              listjobs.append(listj[i])\n",
        "              listUrl.append(url1)\n",
        "              \n",
        "\n",
        "      while (len(listjobs)<15):\n",
        "        print('in')\n",
        "        url=getNewpage(soup)\n",
        "        reponse=requests.get(url)\n",
        "        if reponse.ok: \n",
        "          soup= BeautifulSoup(reponse.text,'lxml')\n",
        "          listj=soup.findAll('div', class_='result')\n",
        "\n",
        "          for i in range(len(listj)):\n",
        "            if (getSalary(listj[i])!=0):\n",
        "              # print('NEW= salary ='+ str(getSalary(listj[i])+' Titre='+str(getJobtitle(listj[i]))));\n",
        "                listjobs.append(listj[i])\n",
        "                listUrl.append(url)\n",
        "\n",
        "          ListMission=[]\n",
        "          for i in range(len(listjobs)): \n",
        "              #print(\"NEW=\"+getUrl(listUrl[i],listjobs[i]))\n",
        "              listDescription.append(getAllDescription(getUrl(listUrl[i],listjobs[i]))) #  DEJA SCRAPPÉ\n",
        "              listDescription[i]=str(listDescription[i]).lower()\n",
        "              ListMission.append(Mission(listjobs[i],listDescription[i]))        \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "    from google.colab import drive\n",
        "    drive.mount('/content/gdrive')\n",
        "    from os.path import join\n",
        "\n",
        "\n",
        "    save_path = \"/content/gdrive/My Drive/hellodoe/\"\n",
        "\n",
        "\n",
        "    entetes = [\n",
        "        u'Titre',\n",
        "        u'Companie',\n",
        "        u'Lieu',\n",
        "        u'Salaire',\n",
        "        u'Contrat',\n",
        "        u'Jour de travail',\n",
        "        u'Horaires',\n",
        "        u'Volume Horaire',\n",
        "        u'Durée contrat',\n",
        "        #u'Description générale',\n",
        "    ]\n",
        "    valeurs=[[]]\n",
        "    for i in range(len(ListMission)):\n",
        "          job=ListMission[i]\n",
        "          valeurs.append([str(job.jobtitle),str(job.companyname),str(job.location),\n",
        "                        str(job.salary),str(job.typeContrat),str(job.workDays),\n",
        "                        str(job.horaires),str(job.volumeHoraire),str(job.dureeContrat) ])\n",
        "\n",
        "    f = open(save_path+'scrapping.csv', 'w')\n",
        "    ligneEntete = \";\".join(entetes) + \"\\n\"\n",
        "    f.write(ligneEntete)\n",
        "    for valeur in valeurs:\n",
        "        ligne = \";\".join(valeur) + \"\\n\"\n",
        "        f.write(ligne)\n",
        "\n",
        "    f.close()\n",
        "    print(\"\\n Done: tu peux trouver le fichier CSV dans ton drive google @ hellodoe/scrapping.csv\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### ENTRER L'URL INDEED A SCRAPPER :\n",
        "url='https://fr.indeed.com/jobs?q=%C3%A9tudiant&l=paris'\n",
        "\n",
        "#### You need to have file called hellodoe in your google drive account\n",
        "\n",
        "\n",
        "scrapper(url)\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "My4K99G6Tx0t",
        "outputId": "2dca3a30-dac8-4b5a-92a3-913285459fb1"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reinitialized existing Git repository in /content/.git/\n",
            "error: open(\"gdrive/MyDrive/Developing Your Communications Plan_OUC_2018.02.21.gslides\"): Operation not supported\n",
            "error: unable to index file gdrive/MyDrive/Developing Your Communications Plan_OUC_2018.02.21.gslides\n",
            "fatal: adding files failed\n",
            "On branch master\n",
            "Your branch is up to date with 'origin/master'.\n",
            "\n",
            "Untracked files:\n",
            "\t\u001b[31mgdrive/\u001b[m\n",
            "\t\u001b[31mscapperhellodoe.py\u001b[m\n",
            "\n",
            "nothing added to commit but untracked files present\n",
            "fatal: remote origin already exists.\n",
            "Everything up-to-date\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}